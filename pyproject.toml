[tool.poetry]
name = "slate_quantum"
version = "0.0.1"
description = "A Framework for Automatic Basis Transformations"
authors = ["Matthew Ord <mo433@cam.ac.uk>"]
readme = "README.md"
packages = [{ include = "slate_quantum" }]

[tool.poetry.dependencies]
python = ">=3.13,<3.14"
numpy = "^2.0.0"
matplotlib = { version = "^3.9.2", optional = true }
slate = { git = "https://github.com/Matt-Ord/slate.git", rev = "beaf8bf" }
sse_solver_py = { git = "https://github.com/Matt-Ord/sse_solver.git", rev = "4af64bb", subdirectory = "sse_solver_py", optional = true }
scipy = "^1.14.1"
qutip = { version = "^5.0.0", optional = true }

[tool.poetry.group.dev.dependencies]
ruff = "*"
pytest = "^8.3.3"
pyright = "^1.1.389"
sphinx = "^8.1.3"
pydata-sphinx-theme = "^0.16.0"

[tool.poetry.extras]
plot = ["matplotlib", "slate"]
qutip = ["qutip"]
sse_solver_py = ["sse_solver_py"]
simulation = ["qutip", "sse_solver_py"]

[tool.ruff]
unsafe-fixes = true

[tool.ruff.lint]
select = ["ALL"]
preview = true
ignore = [
    "COM812",
    "E501",
    "ANN101",
    "S101",
    "PT009",
    "D100",
    "D105",
    "CPY001",
    "TD003",
    "TD002",
    "DOC201",
    "DOC402",
    "DOC501",
    "PD",
]


[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*" = ["PLR6301", "PLC2701", "PLR0914", "D101", "D102", "D103", "D104"]
"examples/**/*" = ["INP001"]
"docs/**/*" = ["INP001", "I002"]

[tool.ruff.lint.pylint]
allow-dunder-method-names = [
    "__as_fundamental__",
    "__from_fundamental__",
    "__into_fundamental__",
    "__as_transformed__",
    "__into_transformed__",
    "__from_transformed__",
    "__convert_vector_into__",
    "__into_inner__",
    "__from_inner__",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.pyright]
typeCheckingMode = "strict"
include = ["tests", "slate_quantum", "examples"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
